class Solution {
    
    /* intuition - keep a dequeue, the first ele of which is the index of the maximum of current window
    only store candidates
    index always in increasing order
    */
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        if (nums == null || k <= 0) {
            return new int[0];
        }
        
        int n = nums.length;
        int[] ans = new int[n-k+1];
        int ansIdx = 0;
        
        Deque<Integer> q = new ArrayDeque<>();
        
        for (int i = 0; i < n; i++) {
            // dequeue
            while (!q.isEmpty() && q.peek() < i - k + 1) {
                q.poll(); // remove from beginning
            }
            
            // in queue, remove indexes of all elements smaller than current
            // intuition - removed indexes will not be candidate for future, so only removed once and for all in its entire life
            while (!q.isEmpty() && nums[q.peekLast()] < nums[i]) {
                q.pollLast(); // remove from the end
            }
            
            q.offer(i);
                
            if (i - k + 1 >= 0) { // skip the first k - 1 elements
                ans[ansIdx++] = nums[q.peek()];
            }
        }
        return ans;   
    }
}
